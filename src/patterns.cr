class GrokPatterns

  @@global_patterns = {
    # grok-patterns
    "USERNAME" => %q([a-zA-Z0-9._-]+),
    "USER" => %q(%{USERNAME}),
    "EMAILLOCALPART" => %q([a-zA-Z][a-zA-Z0-9_.+-=:]+),
    "EMAILADDRESS" => %q(%{EMAILLOCALPART}@%{HOSTNAME}),
    "HTTPDUSER" => %q(%{EMAILADDRESS}|%{USER}),
    "INT" => %q((?:[+-]?(?:[0-9]+))),
    "BASE10NUM" => %q((?<![0-9.+-])(?>[+-]?(?:(?:[0-9]+(?:\.[0-9]+)?)|(?:\.[0-9]+)))),
    "NUMBER" => %q((?:%{BASE10NUM})),
    "BASE16NUM" => %q((?<![0-9A-Fa-f])(?:[+-]?(?:0x)?(?:[0-9A-Fa-f]+))),
    "BASE16FLOAT" => %q(\b(?<![0-9A-Fa-f.])(?:[+-]?(?:0x)?(?:(?:[0-9A-Fa-f]+(?:\.[0-9A-Fa-f]*)?)|(?:\.[0-9A-Fa-f]+)))\b),
    "POSINT" => %q(\b(?:[1-9][0-9]*)\b),
    "NONNEGINT" => %q(\b(?:[0-9]+)\b),
    "WORD" => %q(\b\w+\b),
    "NOTSPACE" => %q(\S+),
    "SPACE" => %q(\s*),
    "DATA" => %q(.*?),
    "GREEDYDATA" => %q(.*),
    "QUOTEDSTRING" => %q((?>(?<!\\)(?>"(?>\\.|[^\\"]+)+"|""|(?>'(?>\\.|[^\\']+)+')|''|(?>`(?>\\.|[^\\`]+)+`)|``))),
    "UUID" => %q([A-Fa-f0-9]{8}-(?:[A-Fa-f0-9]{4}-){3}[A-Fa-f0-9]{12}),
    "URN" => %q(urn:[0-9A-Za-z][0-9A-Za-z-]{0,31}:(?:%[0-9a-fA-F]{2}|[0-9A-Za-z()+,.:=@;$_!*'/?#-])+),
    "MAC" => %q((?:%{CISCOMAC}|%{WINDOWSMAC}|%{COMMONMAC})),
    "CISCOMAC" => %q((?:(?:[A-Fa-f0-9]{4}\.){2}[A-Fa-f0-9]{4})),
    "WINDOWSMAC" => %q((?:(?:[A-Fa-f0-9]{2}-){5}[A-Fa-f0-9]{2})),
    "COMMONMAC" => %q((?:(?:[A-Fa-f0-9]{2}:){5}[A-Fa-f0-9]{2})),
    "IPV6" => %q(((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?),
    "IPV4" => %q((?<![0-9])(?:(?:[0-1]?[0-9]{1,2}|2[0-4][0-9]|25[0-5])[.](?:[0-1]?[0-9]{1,2}|2[0-4][0-9]|25[0-5])[.](?:[0-1]?[0-9]{1,2}|2[0-4][0-9]|25[0-5])[.](?:[0-1]?[0-9]{1,2}|2[0-4][0-9]|25[0-5]))(?![0-9])),
    "IP" => %q((?:%{IPV6}|%{IPV4})),
    "HOSTNAME" => %q(\b(?:[0-9A-Za-z][0-9A-Za-z-]{0,62})(?:\.(?:[0-9A-Za-z][0-9A-Za-z-]{0,62}))*(\.?|\b)),
    "IPORHOST" => %q((?:%{IP}|%{HOSTNAME})),
    "HOSTPORT" => %q(%{IPORHOST}:%{POSINT}),
    "PATH" => %q((?:%{UNIXPATH}|%{WINPATH})),
    "UNIXPATH" => %q((/([\w_%!$@:.,+~-]+|\\.)*)+),
    "TTY" => %q((?:/dev/(pts|tty([pq])?)(\w+)?/?(?:[0-9]+))),
    "WINPATH" => %q((?>[A-Za-z]+:|\\)(?:\\[^\\?*]*)+),
    "URIPROTO" => %q([A-Za-z]([A-Za-z0-9+\-.]+)+),
    "URIHOST" => %q(%{IPORHOST}(?::%{POSINT:port})?),
    "URIPATH" => %q((?:/[A-Za-z0-9$.+!*'(){},~:;=@#%&_\-]*)+),
    "URIPARAM" => %q(\?[A-Za-z0-9$.+!*'|(){},~@#%&/=:;_?\-\[\]<>]*),
    "URIPATHPARAM" => %q(%{URIPATH}(?:%{URIPARAM})?),
    "URI" => %q(%{URIPROTO}://(?:%{USER}(?::[^@]*)?@)?(?:%{URIHOST})?(?:%{URIPATHPARAM})?),
    "MONTH" => %q(\b(?:[Jj]an(?:uary|uar)?|[Ff]eb(?:ruary|ruar)?|[Mm](?:a|Ã¤)?r(?:ch|z)?|[Aa]pr(?:il)?|[Mm]a(?:y|i)?|[Jj]un(?:e|i)?|[Jj]ul(?:y)?|[Aa]ug(?:ust)?|[Ss]ep(?:tember)?|[Oo](?:c|k)?t(?:ober)?|[Nn]ov(?:ember)?|[Dd]e(?:c|z)(?:ember)?)\b),
    "MONTHNUM" => %q((?:0?[1-9]|1[0-2])),
    "MONTHNUM2" => %q((?:0[1-9]|1[0-2])),
    "MONTHDAY" => %q((?:(?:0[1-9])|(?:[12][0-9])|(?:3[01])|[1-9])),
    "DAY" => %q((?:Mon(?:day)?|Tue(?:sday)?|Wed(?:nesday)?|Thu(?:rsday)?|Fri(?:day)?|Sat(?:urday)?|Sun(?:day)?)),
    "YEAR" => %q((?>\d\d){1,2}),
    "HOUR" => %q((?:2[0123]|[01]?[0-9])),
    "MINUTE" => %q((?:[0-5][0-9])),
    "SECOND" => %q((?:(?:[0-5]?[0-9]|60)(?:[:.,][0-9]+)?)),
    "TIME" => %q((?!<[0-9])%{HOUR}:%{MINUTE}(?::%{SECOND})(?![0-9])),
    "DATE_US" => %q(%{MONTHNUM}[/-]%{MONTHDAY}[/-]%{YEAR}),
    "DATE_EU" => %q(%{MONTHDAY}[./-]%{MONTHNUM}[./-]%{YEAR}),
    "ISO8601_TIMEZONE" => %q((?:Z|[+-]%{HOUR}(?::?%{MINUTE}))),
    "ISO8601_SECOND" => %q((?:%{SECOND}|60)),
    "ISO8601_HOUR" => %q((?:2[0123]|[01][0-9])),
    "TIMESTAMP_ISO8601" => %q(%{YEAR}-%{MONTHNUM}-%{MONTHDAY}[T ]%{ISO8601_HOUR}:?%{MINUTE}(?::?%{SECOND})?%{ISO8601_TIMEZONE}?),
    "DATE" => %q(%{DATE_US}|%{DATE_EU}),
    "DATESTAMP" => %q(%{DATE}[- ]%{TIME}),
    "TZ" => %q((?:[APMCE][SD]T|UTC)),
    "DATESTAMP_RFC822" => %q(%{DAY} %{MONTH} %{MONTHDAY} %{YEAR} %{TIME} %{TZ}),
    "DATESTAMP_RFC2822" => %q(%{DAY}, %{MONTHDAY} %{MONTH} %{YEAR} %{TIME} %{ISO8601_TIMEZONE}),
    "DATESTAMP_OTHER" => %q(%{DAY} %{MONTH} %{MONTHDAY} %{TIME} %{TZ} %{YEAR}),
    "DATESTAMP_EVENTLOG" => %q(%{YEAR}%{MONTHNUM2}%{MONTHDAY}%{HOUR}%{MINUTE}%{SECOND}),
    "HTTPDERROR_DATE" => %q(%{DAY} %{MONTH} %{MONTHDAY} %{TIME} %{YEAR}),
    "SYSLOGTIMESTAMP" => %q(%{MONTH} +%{MONTHDAY} %{TIME}),
    "PROG" => %q([\x21-\x5a\x5c\x5e-\x7e]+),
    "SYSLOGPROG" => %q(%{PROG:program}(?:\[%{POSINT:pid}\])?),
    "SYSLOGHOST" => %q(%{IPORHOST}),
    "SYSLOGFACILITY" => %q(<%{NONNEGINT:facility}.%{NONNEGINT:priority}>),
    "HTTPDATE" => %q(%{MONTHDAY}/%{MONTH}/%{YEAR}:%{TIME} %{INT}),
    "QS" => %q(%{QUOTEDSTRING}),
    "SYSLOGBASE" => %q(%{SYSLOGTIMESTAMP:timestamp} (?:%{SYSLOGFACILITY} )?%{SYSLOGHOST:logsource} %{SYSLOGPROG}:),
    "COMMONAPACHELOG" => %q(%{IPORHOST:clientip} %{HTTPDUSER:ident} %{USER:auth} \[%{HTTPDATE:timestamp}\] "(?:%{WORD:verb} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})" %{NUMBER:response} (?:%{NUMBER:bytes}|-)),
    "COMBINEDAPACHELOG" => %q(%{COMMONAPACHELOG} %{QS:referrer} %{QS:agent}),
    "HTTPD20_ERRORLOG" => %q(\[%{HTTPDERROR_DATE:timestamp}\] \[%{LOGLEVEL:loglevel}\] (?:\[client %{IPORHOST:clientip}\] ){0,1}%{GREEDYDATA:errormsg}),
    "HTTPD24_ERRORLOG" => %q(\[%{HTTPDERROR_DATE:timestamp}\] \[(%{WORD:module})?:%{LOGLEVEL:loglevel}\] \[pid %{POSINT:pid}(:tid %{NUMBER:tid})?\]( \(%{POSINT:proxy_errorcode}\)%{DATA:proxy_errormessage}:)?( \[client %{IPORHOST:client}:%{POSINT:clientport}\])?( %{DATA:errorcode}:)? %{GREEDYDATA:message}),
    "HTTPD_ERRORLOG" => %q(%{HTTPD20_ERRORLOG}|%{HTTPD24_ERRORLOG}),
    "LOGLEVEL" => %q(([Aa]lert|ALERT|[Tt]race|TRACE|[Dd]ebug|DEBUG|[Nn]otice|NOTICE|[Ii]nfo|INFO|[Ww]arn?(?:ing)?|WARN?(?:ING)?|[Ee]rr?(?:or)?|ERR?(?:OR)?|[Cc]rit?(?:ical)?|CRIT?(?:ICAL)?|[Ff]atal|FATAL|[Ss]evere|SEVERE|EMERG(?:ENCY)?|[Ee]merg(?:ency)?)),

    # aws
    "S3_REQUEST_LINE" => %q((?:%{WORD:verb} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})),
    "S3_ACCESS_LOG" => %q(%{WORD:owner} %{NOTSPACE:bucket} \[%{HTTPDATE:timestamp}\] %{IP:clientip} %{NOTSPACE:requester} %{NOTSPACE:request_id} %{NOTSPACE:operation} %{NOTSPACE:key} (?:"%{S3_REQUEST_LINE}"|-) (?:%{INT:response:int}|-) (?:-|%{NOTSPACE:error_code}) (?:%{INT:bytes:int}|-) (?:%{INT:object_size:int}|-) (?:%{INT:request_time_ms:int}|-) (?:%{INT:turnaround_time_ms:int}|-) (?:%{QS:referrer}|-) (?:"?%{QS:agent}"?|-) (?:-|%{NOTSPACE:version_id})),
    "ELB_URIPATHPARAM" => %q(%{URIPATH:path}(?:%{URIPARAM:params})?),
    "ELB_URI" => %q(%{URIPROTO:proto}://(?:%{USER}(?::[^@]*)?@)?(?:%{URIHOST:urihost})?(?:%{ELB_URIPATHPARAM})?),
    "ELB_REQUEST_LINE" => %q((?:%{WORD:verb} %{ELB_URI:request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})),
    "ELB_ACCESS_LOG" => %q(%{TIMESTAMP_ISO8601:timestamp} %{NOTSPACE:elb} %{IP:clientip}:%{INT:clientport:int} (?:(%{IP:backendip}:?:%{INT:backendport:int})|-) %{NUMBER:request_processing_time:float} %{NUMBER:backend_processing_time:float} %{NUMBER:response_processing_time:float} %{INT:response:int} %{INT:backend_response:int} %{INT:received_bytes:int} %{INT:bytes:int} "%{ELB_REQUEST_LINE}"),
    "CLOUDFRONT_ACCESS_LOG" => %q((?<timestamp>%{YEAR}-%{MONTHNUM}-%{MONTHDAY}\t%{TIME})\t%{WORD:x_edge_location}\t(?:%{NUMBER:sc_bytes:int}|-)\t%{IPORHOST:clientip}\t%{WORD:cs_method}\t%{HOSTNAME:cs_host}\t%{NOTSPACE:cs_uri_stem}\t%{NUMBER:sc_status:int}\t%{GREEDYDATA:referrer}\t%{GREEDYDATA:agent}\t%{GREEDYDATA:cs_uri_query}\t%{GREEDYDATA:cookies}\t%{WORD:x_edge_result_type}\t%{NOTSPACE:x_edge_request_id}\t%{HOSTNAME:x_host_header}\t%{URIPROTO:cs_protocol}\t%{INT:cs_bytes:int}\t%{GREEDYDATA:time_taken:float}\t%{GREEDYDATA:x_forwarded_for}\t%{GREEDYDATA:ssl_protocol}\t%{GREEDYDATA:ssl_cipher}\t%{GREEDYDATA:x_edge_response_result_type}),

    # bacula
    "BACULA_TIMESTAMP" => %q(%{MONTHDAY}-%{MONTH} %{HOUR}:%{MINUTE}),
    "BACULA_HOST" => %q([a-zA-Z0-9-]+),
    "BACULA_VOLUME" => %q(%{USER}),
    "BACULA_DEVICE" => %q(%{USER}),
    "BACULA_DEVICEPATH" => %q(%{UNIXPATH}),
    "BACULA_CAPACITY" => %q(%{INT}{1,3}(,%{INT}{3})*),
    "BACULA_VERSION" => %q(%{USER}),
    "BACULA_JOB" => %q(%{USER}),
    "BACULA_LOG_MAX_CAPACITY" => %q(User defined maximum volume capacity %{BACULA_CAPACITY} exceeded on device \"%{BACULA_DEVICE:device}\" \(%{BACULA_DEVICEPATH}\)),
    "BACULA_LOG_END_VOLUME" => %q(End of medium on Volume \"%{BACULA_VOLUME:volume}\" Bytes=%{BACULA_CAPACITY} Blocks=%{BACULA_CAPACITY} at %{MONTHDAY}-%{MONTH}-%{YEAR} %{HOUR}:%{MINUTE}.),
    "BACULA_LOG_NEW_VOLUME" => %q(Created new Volume \"%{BACULA_VOLUME:volume}\" in catalog.),
    "BACULA_LOG_NEW_LABEL" => %q(Labeled new Volume \"%{BACULA_VOLUME:volume}\" on device \"%{BACULA_DEVICE:device}\" \(%{BACULA_DEVICEPATH}\).),
    "BACULA_LOG_WROTE_LABEL" => %q(Wrote label to prelabeled Volume \"%{BACULA_VOLUME:volume}\" on device \"%{BACULA_DEVICE}\" \(%{BACULA_DEVICEPATH}\)),
    "BACULA_LOG_NEW_MOUNT" => %q(New volume \"%{BACULA_VOLUME:volume}\" mounted on device \"%{BACULA_DEVICE:device}\" \(%{BACULA_DEVICEPATH}\) at %{MONTHDAY}-%{MONTH}-%{YEAR} %{HOUR}:%{MINUTE}.),
    "BACULA_LOG_NOOPEN" => %q(\s+Cannot open %{DATA}: ERR=%{GREEDYDATA:berror}),
    "BACULA_LOG_NOOPENDIR" => %q(\s+Could not open directory %{DATA}: ERR=%{GREEDYDATA:berror}),
    "BACULA_LOG_NOSTAT" => %q(\s+Could not stat %{DATA}: ERR=%{GREEDYDATA:berror}),
    "BACULA_LOG_NOJOBS" => %q(There are no more Jobs associated with Volume \"%{BACULA_VOLUME:volume}\". Marking it purged.),
    "BACULA_LOG_ALL_RECORDS_PRUNED" => %q(All records pruned from Volume \"%{BACULA_VOLUME:volume}\"; marking it \"Purged\"),
    "BACULA_LOG_BEGIN_PRUNE_JOBS" => %q(Begin pruning Jobs older than %{INT} month %{INT} days .),
    "BACULA_LOG_BEGIN_PRUNE_FILES" => %q(Begin pruning Files.),
    "BACULA_LOG_PRUNED_JOBS" => %q(Pruned %{INT} Jobs* for client %{BACULA_HOST:client} from catalog.),
    "BACULA_LOG_PRUNED_FILES" => %q(Pruned Files from %{INT} Jobs* for client %{BACULA_HOST:client} from catalog.),
    "BACULA_LOG_ENDPRUNE" => %q(End auto prune.),
    "BACULA_LOG_STARTJOB" => %q(Start Backup JobId %{INT}, Job=%{BACULA_JOB:job}),
    "BACULA_LOG_STARTRESTORE" => %q(Start Restore Job %{BACULA_JOB:job}),
    "BACULA_LOG_USEDEVICE" => %q(Using Device \"%{BACULA_DEVICE:device}\"),
    "BACULA_LOG_DIFF_FS" => %q(\s+%{UNIXPATH} is a different filesystem. Will not descend from %{UNIXPATH} into it.),
    "BACULA_LOG_JOBEND" => %q(Job write elapsed time = %{DATA:elapsed}, Transfer rate = %{NUMBER} (K|M|G)? Bytes/second),
    "BACULA_LOG_NOPRUNE_JOBS" => %q(No Jobs found to prune.),
    "BACULA_LOG_NOPRUNE_FILES" => %q(No Files found to prune.),
    "BACULA_LOG_VOLUME_PREVWRITTEN" => %q(Volume \"%{BACULA_VOLUME:volume}\" previously written, moving to end of data.),
    "BACULA_LOG_READYAPPEND" => %q(Ready to append to end of Volume \"%{BACULA_VOLUME:volume}\" size=%{INT}),
    "BACULA_LOG_CANCELLING" => %q(Cancelling duplicate JobId=%{INT}.),
    "BACULA_LOG_MARKCANCEL" => %q(JobId %{INT}, Job %{BACULA_JOB:job} marked to be canceled.),
    "BACULA_LOG_CLIENT_RBJ" => %q(shell command: run ClientRunBeforeJob \"%{GREEDYDATA:runjob}\"),
    "BACULA_LOG_VSS" => %q((Generate )?VSS (Writer)?),
    "BACULA_LOG_MAXSTART" => %q(Fatal error: Job canceled because max start delay time exceeded.),
    "BACULA_LOG_DUPLICATE" => %q(Fatal error: JobId %{INT:duplicate} already running. Duplicate job not allowed.),
    "BACULA_LOG_NOJOBSTAT" => %q(Fatal error: No Job status returned from FD.),
    "BACULA_LOG_FATAL_CONN" => %q(Fatal error: bsock.c:133 Unable to connect to (Client: %{BACULA_HOST:client}|Storage daemon) on %{HOSTNAME}:%{POSINT}. ERR=(?<berror>%{GREEDYDATA})),
    "BACULA_LOG_NO_CONNECT" => %q(Warning: bsock.c:127 Could not connect to (Client: %{BACULA_HOST:client}|Storage daemon) on %{HOSTNAME}:%{POSINT}. ERR=(?<berror>%{GREEDYDATA})),
    "BACULA_LOG_NO_AUTH" => %q(Fatal error: Unable to authenticate with File daemon at %{HOSTNAME}. Possible causes:),
    "BACULA_LOG_NOSUIT" => %q(No prior or suitable Full backup found in catalog. Doing FULL backup.),
    "BACULA_LOG_NOPRIOR" => %q(No prior Full backup Job record found.),
    "BACULA_LOG_JOB" => %q((Error: )?Bacula %{BACULA_HOST} %{BACULA_VERSION} \(%{BACULA_VERSION}\):),
    "BACULA_LOGLINE" => %q(%{BACULA_TIMESTAMP:bts} %{BACULA_HOST:hostname} JobId %{INT:jobid}: (%{BACULA_LOG_MAX_CAPACITY}|%{BACULA_LOG_END_VOLUME}|%{BACULA_LOG_NEW_VOLUME}|%{BACULA_LOG_NEW_LABEL}|%{BACULA_LOG_WROTE_LABEL}|%{BACULA_LOG_NEW_MOUNT}|%{BACULA_LOG_NOOPEN}|%{BACULA_LOG_NOOPENDIR}|%{BACULA_LOG_NOSTAT}|%{BACULA_LOG_NOJOBS}|%{BACULA_LOG_ALL_RECORDS_PRUNED}|%{BACULA_LOG_BEGIN_PRUNE_JOBS}|%{BACULA_LOG_BEGIN_PRUNE_FILES}|%{BACULA_LOG_PRUNED_JOBS}|%{BACULA_LOG_PRUNED_FILES}|%{BACULA_LOG_ENDPRUNE}|%{BACULA_LOG_STARTJOB}|%{BACULA_LOG_STARTRESTORE}|%{BACULA_LOG_USEDEVICE}|%{BACULA_LOG_DIFF_FS}|%{BACULA_LOG_JOBEND}|%{BACULA_LOG_NOPRUNE_JOBS}|%{BACULA_LOG_NOPRUNE_FILES}|%{BACULA_LOG_VOLUME_PREVWRITTEN}|%{BACULA_LOG_READYAPPEND}|%{BACULA_LOG_CANCELLING}|%{BACULA_LOG_MARKCANCEL}|%{BACULA_LOG_CLIENT_RBJ}|%{BACULA_LOG_VSS}|%{BACULA_LOG_MAXSTART}|%{BACULA_LOG_DUPLICATE}|%{BACULA_LOG_NOJOBSTAT}|%{BACULA_LOG_FATAL_CONN}|%{BACULA_LOG_NO_CONNECT}|%{BACULA_LOG_NO_AUTH}|%{BACULA_LOG_NOSUIT}|%{BACULA_LOG_JOB}|%{BACULA_LOG_NOPRIOR})),

    # bind
    "BIND9_TIMESTAMP" => %q(%{MONTHDAY}[-]%{MONTH}[-]%{YEAR} %{TIME}),
    "BIND9" => %q(%{BIND9_TIMESTAMP:timestamp} queries: %{LOGLEVEL:loglevel}: client %{IP:clientip}#%{POSINT:clientport} \(%{GREEDYDATA:query}\): query: %{GREEDYDATA:query} IN %{GREEDYDATA:querytype} \(%{IP:dns}\)),

    # bro
    "BRO_HTTP" => %q(%{NUMBER:ts}\t%{NOTSPACE:uid}\t%{IP:orig_h}\t%{INT:orig_p}\t%{IP:resp_h}\t%{INT:resp_p}\t%{INT:trans_depth}\t%{GREEDYDATA:method}\t%{GREEDYDATA:domain}\t%{GREEDYDATA:uri}\t%{GREEDYDATA:referrer}\t%{GREEDYDATA:user_agent}\t%{NUMBER:request_body_len}\t%{NUMBER:response_body_len}\t%{GREEDYDATA:status_code}\t%{GREEDYDATA:status_msg}\t%{GREEDYDATA:info_code}\t%{GREEDYDATA:info_msg}\t%{GREEDYDATA:filename}\t%{GREEDYDATA:bro_tags}\t%{GREEDYDATA:username}\t%{GREEDYDATA:password}\t%{GREEDYDATA:proxied}\t%{GREEDYDATA:orig_fuids}\t%{GREEDYDATA:orig_mime_types}\t%{GREEDYDATA:resp_fuids}\t%{GREEDYDATA:resp_mime_types}),
    "BRO_DNS" => %q(%{NUMBER:ts}\t%{NOTSPACE:uid}\t%{IP:orig_h}\t%{INT:orig_p}\t%{IP:resp_h}\t%{INT:resp_p}\t%{WORD:proto}\t%{INT:trans_id}\t%{GREEDYDATA:query}\t%{GREEDYDATA:qclass}\t%{GREEDYDATA:qclass_name}\t%{GREEDYDATA:qtype}\t%{GREEDYDATA:qtype_name}\t%{GREEDYDATA:rcode}\t%{GREEDYDATA:rcode_name}\t%{GREEDYDATA:AA}\t%{GREEDYDATA:TC}\t%{GREEDYDATA:RD}\t%{GREEDYDATA:RA}\t%{GREEDYDATA:Z}\t%{GREEDYDATA:answers}\t%{GREEDYDATA:TTLs}\t%{GREEDYDATA:rejected}),
    "BRO_CONN" => %q(%{NUMBER:ts}\t%{NOTSPACE:uid}\t%{IP:orig_h}\t%{INT:orig_p}\t%{IP:resp_h}\t%{INT:resp_p}\t%{WORD:proto}\t%{GREEDYDATA:service}\t%{NUMBER:duration}\t%{NUMBER:orig_bytes}\t%{NUMBER:resp_bytes}\t%{GREEDYDATA:conn_state}\t%{GREEDYDATA:local_orig}\t%{GREEDYDATA:missed_bytes}\t%{GREEDYDATA:history}\t%{GREEDYDATA:orig_pkts}\t%{GREEDYDATA:orig_ip_bytes}\t%{GREEDYDATA:resp_pkts}\t%{GREEDYDATA:resp_ip_bytes}\t%{GREEDYDATA:tunnel_parents}),
    "BRO_FILES" => %q(%{NUMBER:ts}\t%{NOTSPACE:fuid}\t%{IP:tx_hosts}\t%{IP:rx_hosts}\t%{NOTSPACE:conn_uids}\t%{GREEDYDATA:source}\t%{GREEDYDATA:depth}\t%{GREEDYDATA:analyzers}\t%{GREEDYDATA:mime_type}\t%{GREEDYDATA:filename}\t%{GREEDYDATA:duration}\t%{GREEDYDATA:local_orig}\t%{GREEDYDATA:is_orig}\t%{GREEDYDATA:seen_bytes}\t%{GREEDYDATA:total_bytes}\t%{GREEDYDATA:missing_bytes}\t%{GREEDYDATA:overflow_bytes}\t%{GREEDYDATA:timedout}\t%{GREEDYDATA:parent_fuid}\t%{GREEDYDATA:md5}\t%{GREEDYDATA:sha1}\t%{GREEDYDATA:sha256}\t%{GREEDYDATA:extracted}),

    # exim
    "EXIM_MSGID" => %q([0-9A-Za-z]{6}-[0-9A-Za-z]{6}-[0-9A-Za-z]{2}),
    "EXIM_FLAGS" => %q((<=|[-=>*]>|[*]{2}|==)),
    "EXIM_DATE" => %q(%{YEAR:exim_year}-%{MONTHNUM:exim_month}-%{MONTHDAY:exim_day} %{TIME:exim_time}),
    "EXIM_PID" => %q(\[%{POSINT}\]),
    "EXIM_QT" => %q(((\d+y)?(\d+w)?(\d+d)?(\d+h)?(\d+m)?(\d+s)?)),
    "EXIM_EXCLUDE_TERMS" => %q((Message is frozen|(Start|End) queue run| Warning: | retry time not reached | no (IP address|host name) found for (IP address|host) | unexpected disconnection while reading SMTP command | no immediate delivery: |another process is handling this message)),
    "EXIM_REMOTE_HOST" => %q((H=(%{NOTSPACE:remote_hostname} )?(\(%{NOTSPACE:remote_heloname}\) )?\[%{IP:remote_host}\])),
    "EXIM_INTERFACE" => %q((I=\[%{IP:exim_interface}\](:%{NUMBER:exim_interface_port}))),
    "EXIM_PROTOCOL" => %q((P=%{NOTSPACE:protocol})),
    "EXIM_MSG_SIZE" => %q((S=%{NUMBER:exim_msg_size})),
    "EXIM_HEADER_ID" => %q((id=%{NOTSPACE:exim_header_id})),
    "EXIM_SUBJECT" => %q((T=%{QS:exim_subject})),

    # firewalls
    "NETSCREENSESSIONLOG" => %q(%{SYSLOGTIMESTAMP:date} %{IPORHOST:device} %{IPORHOST}: NetScreen device_id=%{WORD:device_id}%{DATA}: start_time=%{QUOTEDSTRING:start_time} duration=%{INT:duration} policy_id=%{INT:policy_id} service=%{DATA:service} proto=%{INT:proto} src zone=%{WORD:src_zone} dst zone=%{WORD:dst_zone} action=%{WORD:action} sent=%{INT:sent} rcvd=%{INT:rcvd} src=%{IPORHOST:src_ip} dst=%{IPORHOST:dst_ip} src_port=%{INT:src_port} dst_port=%{INT:dst_port} src-xlated ip=%{IPORHOST:src_xlated_ip} port=%{INT:src_xlated_port} dst-xlated ip=%{IPORHOST:dst_xlated_ip} port=%{INT:dst_xlated_port} session_id=%{INT:session_id} reason=%{GREEDYDATA:reason}),
    "CISCO_TAGGED_SYSLOG" => %q(^<%{POSINT:syslog_pri}>%{CISCOTIMESTAMP:timestamp}( %{SYSLOGHOST:sysloghost})? ?: %%{CISCOTAG:ciscotag}:),
    "CISCOTIMESTAMP" => %q(%{MONTH} +%{MONTHDAY}(?: %{YEAR})? %{TIME}),
    "CISCOTAG" => %q([A-Z0-9]+-%{INT}-(?:[A-Z0-9_]+)),
    "CISCO_ACTION" => %q(Built|Teardown|Deny|Denied|denied|requested|permitted|denied by ACL|discarded|est-allowed|Dropping|created|deleted),
    "CISCO_REASON" => %q(Duplicate TCP SYN|Failed to locate egress interface|Invalid transport field|No matching connection|DNS Response|DNS Query|(?:%{WORD}\s*)*),
    "CISCO_DIRECTION" => %q(Inbound|inbound|Outbound|outbound),
    "CISCO_INTERVAL" => %q(first hit|%{INT}-second interval),
    "CISCO_XLATE_TYPE" => %q(static|dynamic),
    "CISCOFW104001" => %q(\((?:Primary|Secondary)\) Switching to ACTIVE - %{GREEDYDATA:switch_reason}),
    "CISCOFW104002" => %q(\((?:Primary|Secondary)\) Switching to STANDBY - %{GREEDYDATA:switch_reason}),
    "CISCOFW104003" => %q(\((?:Primary|Secondary)\) Switching to FAILED\.),
    "CISCOFW104004" => %q(\((?:Primary|Secondary)\) Switching to OK\.),
    "CISCOFW105003" => %q(\((?:Primary|Secondary)\) Monitoring on [Ii]nterface %{GREEDYDATA:interface_name} waiting),
    "CISCOFW105004" => %q(\((?:Primary|Secondary)\) Monitoring on [Ii]nterface %{GREEDYDATA:interface_name} normal),
    "CISCOFW105005" => %q(\((?:Primary|Secondary)\) Lost Failover communications with mate on [Ii]nterface %{GREEDYDATA:interface_name}),
    "CISCOFW105008" => %q(\((?:Primary|Secondary)\) Testing [Ii]nterface %{GREEDYDATA:interface_name}),
    "CISCOFW105009" => %q(\((?:Primary|Secondary)\) Testing on [Ii]nterface %{GREEDYDATA:interface_name} (?:Passed|Failed)),
    "CISCOFW106001" => %q(%{CISCO_DIRECTION:direction} %{WORD:protocol} connection %{CISCO_ACTION:action} from %{IP:src_ip}/%{INT:src_port} to %{IP:dst_ip}/%{INT:dst_port} flags %{GREEDYDATA:tcp_flags} on interface %{GREEDYDATA:interface}),
    "CISCOFW106006_106007_106010" => %q(%{CISCO_ACTION:action} %{CISCO_DIRECTION:direction} %{WORD:protocol} (?:from|src) %{IP:src_ip}/%{INT:src_port}(\(%{DATA:src_fwuser}\))? (?:to|dst) %{IP:dst_ip}/%{INT:dst_port}(\(%{DATA:dst_fwuser}\))? (?:on interface %{DATA:interface}|due to %{CISCO_REASON:reason})),
    "CISCOFW106014" => %q(%{CISCO_ACTION:action} %{CISCO_DIRECTION:direction} %{WORD:protocol} src %{DATA:src_interface}:%{IP:src_ip}(\(%{DATA:src_fwuser}\))? dst %{DATA:dst_interface}:%{IP:dst_ip}(\(%{DATA:dst_fwuser}\))? \(type %{INT:icmp_type}, code %{INT:icmp_code}\)),
    "CISCOFW106015" => %q(%{CISCO_ACTION:action} %{WORD:protocol} \(%{DATA:policy_id}\) from %{IP:src_ip}/%{INT:src_port} to %{IP:dst_ip}/%{INT:dst_port} flags %{DATA:tcp_flags} on interface %{GREEDYDATA:interface}),
    "CISCOFW106021" => %q(%{CISCO_ACTION:action} %{WORD:protocol} reverse path check from %{IP:src_ip} to %{IP:dst_ip} on interface %{GREEDYDATA:interface}),
    "CISCOFW106023" => %q(%{CISCO_ACTION:action}( protocol)? %{WORD:protocol} src %{DATA:src_interface}:%{DATA:src_ip}(/%{INT:src_port})?(\(%{DATA:src_fwuser}\))? dst %{DATA:dst_interface}:%{DATA:dst_ip}(/%{INT:dst_port})?(\(%{DATA:dst_fwuser}\))?( \(type %{INT:icmp_type}, code %{INT:icmp_code}\))? by access-group "?%{DATA:policy_id}"? \[%{DATA:hashcode1}, %{DATA:hashcode2}\]),
    "CISCOFW106100_2_3" => %q(access-list %{NOTSPACE:policy_id} %{CISCO_ACTION:action} %{WORD:protocol} for user '%{DATA:src_fwuser}' %{DATA:src_interface}/%{IP:src_ip}\(%{INT:src_port}\) -> %{DATA:dst_interface}/%{IP:dst_ip}\(%{INT:dst_port}\) hit-cnt %{INT:hit_count} %{CISCO_INTERVAL:interval} \[%{DATA:hashcode1}, %{DATA:hashcode2}\]),
    "CISCOFW106100" => %q(access-list %{NOTSPACE:policy_id} %{CISCO_ACTION:action} %{WORD:protocol} %{DATA:src_interface}/%{IP:src_ip}\(%{INT:src_port}\)(\(%{DATA:src_fwuser}\))? -> %{DATA:dst_interface}/%{IP:dst_ip}\(%{INT:dst_port}\)(\(%{DATA:src_fwuser}\))? hit-cnt %{INT:hit_count} %{CISCO_INTERVAL:interval} \[%{DATA:hashcode1}, %{DATA:hashcode2}\]),
    "CISCOFW304001" => %q(%{IP:src_ip}(\(%{DATA:src_fwuser}\))? Accessed URL %{IP:dst_ip}:%{GREEDYDATA:dst_url}),
    "CISCOFW110002" => %q(%{CISCO_REASON:reason} for %{WORD:protocol} from %{DATA:src_interface}:%{IP:src_ip}/%{INT:src_port} to %{IP:dst_ip}/%{INT:dst_port}),
    "CISCOFW302010" => %q(%{INT:connection_count} in use, %{INT:connection_count_max} most used),
    "CISCOFW302013_302014_302015_302016" => %q(%{CISCO_ACTION:action}(?: %{CISCO_DIRECTION:direction})? %{WORD:protocol} connection %{INT:connection_id} for %{DATA:src_interface}:%{IP:src_ip}/%{INT:src_port}( \(%{IP:src_mapped_ip}/%{INT:src_mapped_port}\))?(\(%{DATA:src_fwuser}\))? to %{DATA:dst_interface}:%{IP:dst_ip}/%{INT:dst_port}( \(%{IP:dst_mapped_ip}/%{INT:dst_mapped_port}\))?(\(%{DATA:dst_fwuser}\))?( duration %{TIME:duration} bytes %{INT:bytes})?(?: %{CISCO_REASON:reason})?( \(%{DATA:user}\))?),
    "CISCOFW302020_302021" => %q(%{CISCO_ACTION:action}(?: %{CISCO_DIRECTION:direction})? %{WORD:protocol} connection for faddr %{IP:dst_ip}/%{INT:icmp_seq_num}(?:\(%{DATA:fwuser}\))? gaddr %{IP:src_xlated_ip}/%{INT:icmp_code_xlated} laddr %{IP:src_ip}/%{INT:icmp_code}( \(%{DATA:user}\))?),
    "CISCOFW305011" => %q(%{CISCO_ACTION:action} %{CISCO_XLATE_TYPE:xlate_type} %{WORD:protocol} translation from %{DATA:src_interface}:%{IP:src_ip}(/%{INT:src_port})?(\(%{DATA:src_fwuser}\))? to %{DATA:src_xlated_interface}:%{IP:src_xlated_ip}/%{DATA:src_xlated_port}),
    "CISCOFW313001_313004_313008" => %q(%{CISCO_ACTION:action} %{WORD:protocol} type=%{INT:icmp_type}, code=%{INT:icmp_code} from %{IP:src_ip} on interface %{DATA:interface}( to %{IP:dst_ip})?),
    "CISCOFW313005" => %q(%{CISCO_REASON:reason} for %{WORD:protocol} error message: %{WORD:err_protocol} src %{DATA:err_src_interface}:%{IP:err_src_ip}(\(%{DATA:err_src_fwuser}\))? dst %{DATA:err_dst_interface}:%{IP:err_dst_ip}(\(%{DATA:err_dst_fwuser}\))? \(type %{INT:err_icmp_type}, code %{INT:err_icmp_code}\) on %{DATA:interface} interface\.  Original IP payload: %{WORD:protocol} src %{IP:orig_src_ip}/%{INT:orig_src_port}(\(%{DATA:orig_src_fwuser}\))? dst %{IP:orig_dst_ip}/%{INT:orig_dst_port}(\(%{DATA:orig_dst_fwuser}\))?),
    "CISCOFW321001" => %q(Resource '%{WORD:resource_name}' limit of %{POSINT:resource_limit} reached for system),
    "CISCOFW402117" => %q(%{WORD:protocol}: Received a non-IPSec packet \(protocol= %{WORD:orig_protocol}\) from %{IP:src_ip} to %{IP:dst_ip}),
    "CISCOFW402119" => %q(%{WORD:protocol}: Received an %{WORD:orig_protocol} packet \(SPI= %{DATA:spi}, sequence number= %{DATA:seq_num}\) from %{IP:src_ip} \(user= %{DATA:user}\) to %{IP:dst_ip} that failed anti-replay checking),
    "CISCOFW419001" => %q(%{CISCO_ACTION:action} %{WORD:protocol} packet from %{DATA:src_interface}:%{IP:src_ip}/%{INT:src_port} to %{DATA:dst_interface}:%{IP:dst_ip}/%{INT:dst_port}, reason: %{GREEDYDATA:reason}),
    "CISCOFW419002" => %q(%{CISCO_REASON:reason} from %{DATA:src_interface}:%{IP:src_ip}/%{INT:src_port} to %{DATA:dst_interface}:%{IP:dst_ip}/%{INT:dst_port} with different initial sequence number),
    "CISCOFW500004" => %q(%{CISCO_REASON:reason} for protocol=%{WORD:protocol}, from %{IP:src_ip}/%{INT:src_port} to %{IP:dst_ip}/%{INT:dst_port}),
    "CISCOFW602303_602304" => %q(%{WORD:protocol}: An %{CISCO_DIRECTION:direction} %{GREEDYDATA:tunnel_type} SA \(SPI= %{DATA:spi}\) between %{IP:src_ip} and %{IP:dst_ip} \(user= %{DATA:user}\) has been %{CISCO_ACTION:action}),
    "CISCOFW710001_710002_710003_710005_710006" => %q(%{WORD:protocol} (?:request|access) %{CISCO_ACTION:action} from %{IP:src_ip}/%{INT:src_port} to %{DATA:dst_interface}:%{IP:dst_ip}/%{INT:dst_port}),
    "CISCOFW713172" => %q(Group = %{GREEDYDATA:group}, IP = %{IP:src_ip}, Automatic NAT Detection Status:\s+Remote end\s*%{DATA:is_remote_natted}\s*behind a NAT device\s+This\s+end\s*%{DATA:is_local_natted}\s*behind a NAT device),
    "CISCOFW733100" => %q(\[\s*%{DATA:drop_type}\s*\] drop %{DATA:drop_rate_id} exceeded. Current burst rate is %{INT:drop_rate_current_burst} per second, max configured rate is %{INT:drop_rate_max_burst}; Current average rate is %{INT:drop_rate_current_avg} per second, max configured rate is %{INT:drop_rate_max_avg}; Cumulative total count is %{INT:drop_total_count}),
    "SHOREWALL" => %q((%{SYSLOGTIMESTAMP:timestamp}) (%{WORD:nf_host}) kernel:.*Shorewall:(%{WORD:nf_action1})?:(%{WORD:nf_action2})?.*IN=(%{USERNAME:nf_in_interface})?.*(OUT= *MAC=(%{COMMONMAC:nf_dst_mac}):(%{COMMONMAC:nf_src_mac})?|OUT=%{USERNAME:nf_out_interface}).*SRC=(%{IPV4:nf_src_ip}).*DST=(%{IPV4:nf_dst_ip}).*LEN=(%{WORD:nf_len}).?*TOS=(%{WORD:nf_tos}).?*PREC=(%{WORD:nf_prec}).?*TTL=(%{INT:nf_ttl}).?*ID=(%{INT:nf_id}).?*PROTO=(%{WORD:nf_protocol}).?*SPT=(%{INT:nf_src_port}?.*DPT=%{INT:nf_dst_port}?.*)),
    "SFW2" => %q(((%{SYSLOGTIMESTAMP})|(%{TIMESTAMP_ISO8601}))\s*%{HOSTNAME}\s*kernel\S+\s*%{NAGIOSTIME}\s*SFW2\-INext\-%{NOTSPACE:nf_action}\s*IN=%{USERNAME:nf_in_interface}.*OUT=((\s*%{USERNAME:nf_out_interface})|(\s*))MAC=((%{COMMONMAC:nf_dst_mac}:%{COMMONMAC:nf_src_mac})|(\s*)).*SRC=%{IP:nf_src_ip}\s*DST=%{IP:nf_dst_ip}.*PROTO=%{WORD:nf_protocol}((.*SPT=%{INT:nf_src_port}.*DPT=%{INT:nf_dst_port}.*)|())),

    # haproxy
    "HAPROXYTIME" => %q((?!<[0-9])%{HOUR:haproxy_hour}:%{MINUTE:haproxy_minute}(?::%{SECOND:haproxy_second})(?![0-9])),
    "HAPROXYDATE" => %q(%{MONTHDAY:haproxy_monthday}/%{MONTH:haproxy_month}/%{YEAR:haproxy_year}:%{HAPROXYTIME:haproxy_time}.%{INT:haproxy_milliseconds}),
    "HAPROXYCAPTUREDREQUESTHEADERS" => %q(%{DATA:captured_request_headers}),
    "HAPROXYCAPTUREDRESPONSEHEADERS" => %q(%{DATA:captured_response_headers}),
    "HAPROXYHTTPBASE" => %q(%{IP:client_ip}:%{INT:client_port} \[%{HAPROXYDATE:accept_date}\] %{NOTSPACE:frontend_name} %{NOTSPACE:backend_name}/%{NOTSPACE:server_name} %{INT:time_request}/%{INT:time_queue}/%{INT:time_backend_connect}/%{INT:time_backend_response}/%{NOTSPACE:time_duration} %{INT:http_status_code} %{NOTSPACE:bytes_read} %{DATA:captured_request_cookie} %{DATA:captured_response_cookie} %{NOTSPACE:termination_state} %{INT:actconn}/%{INT:feconn}/%{INT:beconn}/%{INT:srvconn}/%{NOTSPACE:retries} %{INT:srv_queue}/%{INT:backend_queue} (\{%{HAPROXYCAPTUREDREQUESTHEADERS}\})?( )?(\{%{HAPROXYCAPTUREDRESPONSEHEADERS}\})?( )?"(<BADREQ>|(%{WORD:http_verb} (%{URIPROTO:http_proto}://)?(?:%{USER:http_user}(?::[^@]*)?@)?(?:%{URIHOST:http_host})?(?:%{URIPATHPARAM:http_request})?( HTTP/%{NUMBER:http_version})?))?"),
    "HAPROXYHTTP" => %q((?:%{SYSLOGTIMESTAMP:syslog_timestamp}|%{TIMESTAMP_ISO8601:timestamp8601}) %{IPORHOST:syslog_server} %{SYSLOGPROG}: %{HAPROXYHTTPBASE}),
    "HAPROXYTCP" => %q((?:%{SYSLOGTIMESTAMP:syslog_timestamp}|%{TIMESTAMP_ISO8601:timestamp8601}) %{IPORHOST:syslog_server} %{SYSLOGPROG}: %{IP:client_ip}:%{INT:client_port} \[%{HAPROXYDATE:accept_date}\] %{NOTSPACE:frontend_name} %{NOTSPACE:backend_name}/%{NOTSPACE:server_name} %{INT:time_queue}/%{INT:time_backend_connect}/%{NOTSPACE:time_duration} %{NOTSPACE:bytes_read} %{NOTSPACE:termination_state} %{INT:actconn}/%{INT:feconn}/%{INT:beconn}/%{INT:srvconn}/%{NOTSPACE:retries} %{INT:srv_queue}/%{INT:backend_queue}),

    # java
    "JAVACLASS" => %q((?:[a-zA-Z$_][a-zA-Z$_0-9]*\.)*[a-zA-Z$_][a-zA-Z$_0-9]*),
    "JAVAFILE" => %q((?:[A-Za-z0-9_. -]+)),
    "JAVAMETHOD" => %q((?:(<(?:cl)?init>)|[a-zA-Z$_][a-zA-Z$_0-9]*)),
    "JAVASTACKTRACEPART" => %q(%{SPACE}at %{JAVACLASS:class}\.%{JAVAMETHOD:method}\(%{JAVAFILE:file}(?::%{NUMBER:line})?\)),
    "JAVATHREAD" => %q((?:[A-Z]{2}-Processor[\d]+)),
    "JAVALOGMESSAGE" => %q((.*)),
    "CATALINA_DATESTAMP" => %q(%{MONTH} %{MONTHDAY}, 20%{YEAR} %{HOUR}:?%{MINUTE}(?::?%{SECOND}) (?:AM|PM)),
    "TOMCAT_DATESTAMP" => %q(20%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{HOUR}:?%{MINUTE}(?::?%{SECOND}) %{ISO8601_TIMEZONE}),
    "CATALINALOG" => %q(%{CATALINA_DATESTAMP:timestamp} %{JAVACLASS:class} %{JAVALOGMESSAGE:logmessage}),
    "TOMCATLOG" => %q(%{TOMCAT_DATESTAMP:timestamp} \| %{LOGLEVEL:level} \| %{JAVACLASS:class} - %{JAVALOGMESSAGE:logmessage}),

    # junos
    "RT_FLOW_EVENT" => %q((RT_FLOW_SESSION_CREATE|RT_FLOW_SESSION_CLOSE|RT_FLOW_SESSION_DENY)),
    "RT_FLOW1" => %q(%{RT_FLOW_EVENT:event}: %{GREEDYDATA:close-reason}: %{IP:src-ip}/%{INT:src-port}->%{IP:dst-ip}/%{INT:dst-port} %{DATA:service} %{IP:nat-src-ip}/%{INT:nat-src-port}->%{IP:nat-dst-ip}/%{INT:nat-dst-port} %{DATA:src-nat-rule-name} %{DATA:dst-nat-rule-name} %{INT:protocol-id} %{DATA:policy-name} %{DATA:from-zone} %{DATA:to-zone} %{INT:session-id} \d+\(%{DATA:sent}\) \d+\(%{DATA:received}\) %{INT:elapsed-time} .*),
    "RT_FLOW2" => %q(%{RT_FLOW_EVENT:event}: session created %{IP:src-ip}/%{INT:src-port}->%{IP:dst-ip}/%{INT:dst-port} %{DATA:service} %{IP:nat-src-ip}/%{INT:nat-src-port}->%{IP:nat-dst-ip}/%{INT:nat-dst-port} %{DATA:src-nat-rule-name} %{DATA:dst-nat-rule-name} %{INT:protocol-id} %{DATA:policy-name} %{DATA:from-zone} %{DATA:to-zone} %{INT:session-id} .*),
    "RT_FLOW3" => %q(%{RT_FLOW_EVENT:event}: session denied %{IP:src-ip}/%{INT:src-port}->%{IP:dst-ip}/%{INT:dst-port} %{DATA:service} %{INT:protocol-id}\(\d\) %{DATA:policy-name} %{DATA:from-zone} %{DATA:to-zone} .*),

    # linux-syslog
    "SYSLOG5424PRINTASCII" => %q([!-~]+),
    "SYSLOGBASE2" => %q((?:%{SYSLOGTIMESTAMP:timestamp}|%{TIMESTAMP_ISO8601:timestamp8601}) (?:%{SYSLOGFACILITY} )?%{SYSLOGHOST:logsource}+(?: %{SYSLOGPROG}:|)),
    "SYSLOGPAMSESSION" => %q(%{SYSLOGBASE} (?=%{GREEDYDATA:message})%{WORD:pam_module}\(%{DATA:pam_caller}\): session %{WORD:pam_session_state} for user %{USERNAME:username}(?: by %{GREEDYDATA:pam_by})?),
    "CRON_ACTION" => %q([A-Z ]+),
    "CRONLOG" => %q(%{SYSLOGBASE} \(%{USER:user}\) %{CRON_ACTION:action} \(%{DATA:message}\)),
    "SYSLOGLINE" => %q(%{SYSLOGBASE2} %{GREEDYDATA:message}),
    "SYSLOG5424PRI" => %q(<%{NONNEGINT:syslog5424_pri}>),
    "SYSLOG5424SD" => %q(\[%{DATA}\]+),
    "SYSLOG5424BASE" => %q(%{SYSLOG5424PRI}%{NONNEGINT:syslog5424_ver} +(?:%{TIMESTAMP_ISO8601:syslog5424_ts}|-) +(?:%{IPORHOST:syslog5424_host}|-) +(-|%{SYSLOG5424PRINTASCII:syslog5424_app}) +(-|%{SYSLOG5424PRINTASCII:syslog5424_proc}) +(-|%{SYSLOG5424PRINTASCII:syslog5424_msgid}) +(?:%{SYSLOG5424SD:syslog5424_sd}|-|)),
    "SYSLOG5424LINE" => %q(%{SYSLOG5424BASE} +%{GREEDYDATA:syslog5424_msg}),

    # maven
    "MAVEN_VERSION" => %q((?:(\d+)\.)?(?:(\d+)\.)?(\*|\d+)(?:[.-](RELEASE|SNAPSHOT))?),

    # mcollective-patterns
    "MCOLLECTIVE" => %q(., \[%{TIMESTAMP_ISO8601:timestamp} #%{POSINT:pid}\]%{SPACE}%{LOGLEVEL:event_level}),
    "MCOLLECTIVEAUDIT" => %q(%{TIMESTAMP_ISO8601:timestamp}:),

    # mongodb
    "MONGO_LOG" => %q(%{SYSLOGTIMESTAMP:timestamp} \[%{WORD:component}\] %{GREEDYDATA:message}),
    "MONGO_QUERY" => %q(\{ (?<={ ).*(?= } ntoreturn:) \}),
    "MONGO_SLOWQUERY" => %q(%{WORD} %{MONGO_WORDDASH:database}\.%{MONGO_WORDDASH:collection} %{WORD}: %{MONGO_QUERY:query} %{WORD}:%{NONNEGINT:ntoreturn} %{WORD}:%{NONNEGINT:ntoskip} %{WORD}:%{NONNEGINT:nscanned}.*nreturned:%{NONNEGINT:nreturned}..+ (?<duration>[0-9]+)ms),
    "MONGO_WORDDASH" => %q(\b[\w-]+\b),
    "MONGO3_SEVERITY" => %q(\w),
    "MONGO3_COMPONENT" => %q(%{WORD}|-),
    "MONGO3_LOG" => %q(%{TIMESTAMP_ISO8601:timestamp} %{MONGO3_SEVERITY:severity} %{MONGO3_COMPONENT:component}%{SPACE}(?:\[%{DATA:context}\])? %{GREEDYDATA:message}),

    # nagios
    "NAGIOSTIME" => %q(\[%{NUMBER:nagios_epoch}\]),
    "NAGIOS_TYPE_CURRENT_SERVICE_STATE" => %q(CURRENT SERVICE STATE),
    "NAGIOS_TYPE_CURRENT_HOST_STATE" => %q(CURRENT HOST STATE),
    "NAGIOS_TYPE_SERVICE_NOTIFICATION" => %q(SERVICE NOTIFICATION),
    "NAGIOS_TYPE_HOST_NOTIFICATION" => %q(HOST NOTIFICATION),
    "NAGIOS_TYPE_SERVICE_ALERT" => %q(SERVICE ALERT),
    "NAGIOS_TYPE_HOST_ALERT" => %q(HOST ALERT),
    "NAGIOS_TYPE_SERVICE_FLAPPING_ALERT" => %q(SERVICE FLAPPING ALERT),
    "NAGIOS_TYPE_HOST_FLAPPING_ALERT" => %q(HOST FLAPPING ALERT),
    "NAGIOS_TYPE_SERVICE_DOWNTIME_ALERT" => %q(SERVICE DOWNTIME ALERT),
    "NAGIOS_TYPE_HOST_DOWNTIME_ALERT" => %q(HOST DOWNTIME ALERT),
    "NAGIOS_TYPE_PASSIVE_SERVICE_CHECK" => %q(PASSIVE SERVICE CHECK),
    "NAGIOS_TYPE_PASSIVE_HOST_CHECK" => %q(PASSIVE HOST CHECK),
    "NAGIOS_TYPE_SERVICE_EVENT_HANDLER" => %q(SERVICE EVENT HANDLER),
    "NAGIOS_TYPE_HOST_EVENT_HANDLER" => %q(HOST EVENT HANDLER),
    "NAGIOS_TYPE_EXTERNAL_COMMAND" => %q(EXTERNAL COMMAND),
    "NAGIOS_TYPE_TIMEPERIOD_TRANSITION" => %q(TIMEPERIOD TRANSITION),
    "NAGIOS_EC_DISABLE_SVC_CHECK" => %q(DISABLE_SVC_CHECK),
    "NAGIOS_EC_ENABLE_SVC_CHECK" => %q(ENABLE_SVC_CHECK),
    "NAGIOS_EC_DISABLE_HOST_CHECK" => %q(DISABLE_HOST_CHECK),
    "NAGIOS_EC_ENABLE_HOST_CHECK" => %q(ENABLE_HOST_CHECK),
    "NAGIOS_EC_PROCESS_SERVICE_CHECK_RESULT" => %q(PROCESS_SERVICE_CHECK_RESULT),
    "NAGIOS_EC_PROCESS_HOST_CHECK_RESULT" => %q(PROCESS_HOST_CHECK_RESULT),
    "NAGIOS_EC_SCHEDULE_SERVICE_DOWNTIME" => %q(SCHEDULE_SERVICE_DOWNTIME),
    "NAGIOS_EC_SCHEDULE_HOST_DOWNTIME" => %q(SCHEDULE_HOST_DOWNTIME),
    "NAGIOS_EC_DISABLE_HOST_SVC_NOTIFICATIONS" => %q(DISABLE_HOST_SVC_NOTIFICATIONS),
    "NAGIOS_EC_ENABLE_HOST_SVC_NOTIFICATIONS" => %q(ENABLE_HOST_SVC_NOTIFICATIONS),
    "NAGIOS_EC_DISABLE_HOST_NOTIFICATIONS" => %q(DISABLE_HOST_NOTIFICATIONS),
    "NAGIOS_EC_ENABLE_HOST_NOTIFICATIONS" => %q(ENABLE_HOST_NOTIFICATIONS),
    "NAGIOS_EC_DISABLE_SVC_NOTIFICATIONS" => %q(DISABLE_SVC_NOTIFICATIONS),
    "NAGIOS_EC_ENABLE_SVC_NOTIFICATIONS" => %q(ENABLE_SVC_NOTIFICATIONS),
    "NAGIOS_WARNING" => %q(Warning:%{SPACE}%{GREEDYDATA:nagios_message}),
    "NAGIOS_CURRENT_SERVICE_STATE" => %q(%{NAGIOS_TYPE_CURRENT_SERVICE_STATE:nagios_type}: %{DATA:nagios_hostname};%{DATA:nagios_service};%{DATA:nagios_state};%{DATA:nagios_statetype};%{DATA:nagios_statecode};%{GREEDYDATA:nagios_message}),
    "NAGIOS_CURRENT_HOST_STATE" => %q(%{NAGIOS_TYPE_CURRENT_HOST_STATE:nagios_type}: %{DATA:nagios_hostname};%{DATA:nagios_state};%{DATA:nagios_statetype};%{DATA:nagios_statecode};%{GREEDYDATA:nagios_message}),
    "NAGIOS_SERVICE_NOTIFICATION" => %q(%{NAGIOS_TYPE_SERVICE_NOTIFICATION:nagios_type}: %{DATA:nagios_notifyname};%{DATA:nagios_hostname};%{DATA:nagios_service};%{DATA:nagios_state};%{DATA:nagios_contact};%{GREEDYDATA:nagios_message}),
    "NAGIOS_HOST_NOTIFICATION" => %q(%{NAGIOS_TYPE_HOST_NOTIFICATION:nagios_type}: %{DATA:nagios_notifyname};%{DATA:nagios_hostname};%{DATA:nagios_state};%{DATA:nagios_contact};%{GREEDYDATA:nagios_message}),
    "NAGIOS_SERVICE_ALERT" => %q(%{NAGIOS_TYPE_SERVICE_ALERT:nagios_type}: %{DATA:nagios_hostname};%{DATA:nagios_service};%{DATA:nagios_state};%{DATA:nagios_statelevel};%{NUMBER:nagios_attempt};%{GREEDYDATA:nagios_message}),
    "NAGIOS_HOST_ALERT" => %q(%{NAGIOS_TYPE_HOST_ALERT:nagios_type}: %{DATA:nagios_hostname};%{DATA:nagios_state};%{DATA:nagios_statelevel};%{NUMBER:nagios_attempt};%{GREEDYDATA:nagios_message}),
    "NAGIOS_SERVICE_FLAPPING_ALERT" => %q(%{NAGIOS_TYPE_SERVICE_FLAPPING_ALERT:nagios_type}: %{DATA:nagios_hostname};%{DATA:nagios_service};%{DATA:nagios_state};%{GREEDYDATA:nagios_message}),
    "NAGIOS_HOST_FLAPPING_ALERT" => %q(%{NAGIOS_TYPE_HOST_FLAPPING_ALERT:nagios_type}: %{DATA:nagios_hostname};%{DATA:nagios_state};%{GREEDYDATA:nagios_message}),
    "NAGIOS_SERVICE_DOWNTIME_ALERT" => %q(%{NAGIOS_TYPE_SERVICE_DOWNTIME_ALERT:nagios_type}: %{DATA:nagios_hostname};%{DATA:nagios_service};%{DATA:nagios_state};%{GREEDYDATA:nagios_comment}),
    "NAGIOS_HOST_DOWNTIME_ALERT" => %q(%{NAGIOS_TYPE_HOST_DOWNTIME_ALERT:nagios_type}: %{DATA:nagios_hostname};%{DATA:nagios_state};%{GREEDYDATA:nagios_comment}),
    "NAGIOS_PASSIVE_SERVICE_CHECK" => %q(%{NAGIOS_TYPE_PASSIVE_SERVICE_CHECK:nagios_type}: %{DATA:nagios_hostname};%{DATA:nagios_service};%{DATA:nagios_state};%{GREEDYDATA:nagios_comment}),
    "NAGIOS_PASSIVE_HOST_CHECK" => %q(%{NAGIOS_TYPE_PASSIVE_HOST_CHECK:nagios_type}: %{DATA:nagios_hostname};%{DATA:nagios_state};%{GREEDYDATA:nagios_comment}),
    "NAGIOS_SERVICE_EVENT_HANDLER" => %q(%{NAGIOS_TYPE_SERVICE_EVENT_HANDLER:nagios_type}: %{DATA:nagios_hostname};%{DATA:nagios_service};%{DATA:nagios_state};%{DATA:nagios_statelevel};%{DATA:nagios_event_handler_name}),
    "NAGIOS_HOST_EVENT_HANDLER" => %q(%{NAGIOS_TYPE_HOST_EVENT_HANDLER:nagios_type}: %{DATA:nagios_hostname};%{DATA:nagios_state};%{DATA:nagios_statelevel};%{DATA:nagios_event_handler_name}),
    "NAGIOS_TIMEPERIOD_TRANSITION" => %q(%{NAGIOS_TYPE_TIMEPERIOD_TRANSITION:nagios_type}: %{DATA:nagios_service};%{DATA:nagios_unknown1};%{DATA:nagios_unknown2}),
    "NAGIOS_EC_LINE_DISABLE_SVC_CHECK" => %q(%{NAGIOS_TYPE_EXTERNAL_COMMAND:nagios_type}: %{NAGIOS_EC_DISABLE_SVC_CHECK:nagios_command};%{DATA:nagios_hostname};%{DATA:nagios_service}),
    "NAGIOS_EC_LINE_DISABLE_HOST_CHECK" => %q(%{NAGIOS_TYPE_EXTERNAL_COMMAND:nagios_type}: %{NAGIOS_EC_DISABLE_HOST_CHECK:nagios_command};%{DATA:nagios_hostname}),
    "NAGIOS_EC_LINE_ENABLE_SVC_CHECK" => %q(%{NAGIOS_TYPE_EXTERNAL_COMMAND:nagios_type}: %{NAGIOS_EC_ENABLE_SVC_CHECK:nagios_command};%{DATA:nagios_hostname};%{DATA:nagios_service}),
    "NAGIOS_EC_LINE_ENABLE_HOST_CHECK" => %q(%{NAGIOS_TYPE_EXTERNAL_COMMAND:nagios_type}: %{NAGIOS_EC_ENABLE_HOST_CHECK:nagios_command};%{DATA:nagios_hostname}),
    "NAGIOS_EC_LINE_PROCESS_SERVICE_CHECK_RESULT" => %q(%{NAGIOS_TYPE_EXTERNAL_COMMAND:nagios_type}: %{NAGIOS_EC_PROCESS_SERVICE_CHECK_RESULT:nagios_command};%{DATA:nagios_hostname};%{DATA:nagios_service};%{DATA:nagios_state};%{GREEDYDATA:nagios_check_result}),
    "NAGIOS_EC_LINE_PROCESS_HOST_CHECK_RESULT" => %q(%{NAGIOS_TYPE_EXTERNAL_COMMAND:nagios_type}: %{NAGIOS_EC_PROCESS_HOST_CHECK_RESULT:nagios_command};%{DATA:nagios_hostname};%{DATA:nagios_state};%{GREEDYDATA:nagios_check_result}),
    "NAGIOS_EC_LINE_DISABLE_HOST_SVC_NOTIFICATIONS" => %q(%{NAGIOS_TYPE_EXTERNAL_COMMAND:nagios_type}: %{NAGIOS_EC_DISABLE_HOST_SVC_NOTIFICATIONS:nagios_command};%{GREEDYDATA:nagios_hostname}),
    "NAGIOS_EC_LINE_DISABLE_HOST_NOTIFICATIONS" => %q(%{NAGIOS_TYPE_EXTERNAL_COMMAND:nagios_type}: %{NAGIOS_EC_DISABLE_HOST_NOTIFICATIONS:nagios_command};%{GREEDYDATA:nagios_hostname}),
    "NAGIOS_EC_LINE_DISABLE_SVC_NOTIFICATIONS" => %q(%{NAGIOS_TYPE_EXTERNAL_COMMAND:nagios_type}: %{NAGIOS_EC_DISABLE_SVC_NOTIFICATIONS:nagios_command};%{DATA:nagios_hostname};%{GREEDYDATA:nagios_service}),
    "NAGIOS_EC_LINE_ENABLE_HOST_SVC_NOTIFICATIONS" => %q(%{NAGIOS_TYPE_EXTERNAL_COMMAND:nagios_type}: %{NAGIOS_EC_ENABLE_HOST_SVC_NOTIFICATIONS:nagios_command};%{GREEDYDATA:nagios_hostname}),
    "NAGIOS_EC_LINE_ENABLE_HOST_NOTIFICATIONS" => %q(%{NAGIOS_TYPE_EXTERNAL_COMMAND:nagios_type}: %{NAGIOS_EC_ENABLE_HOST_NOTIFICATIONS:nagios_command};%{GREEDYDATA:nagios_hostname}),
    "NAGIOS_EC_LINE_ENABLE_SVC_NOTIFICATIONS" => %q(%{NAGIOS_TYPE_EXTERNAL_COMMAND:nagios_type}: %{NAGIOS_EC_ENABLE_SVC_NOTIFICATIONS:nagios_command};%{DATA:nagios_hostname};%{GREEDYDATA:nagios_service}),
    "NAGIOS_EC_LINE_SCHEDULE_HOST_DOWNTIME" => %q(%{NAGIOS_TYPE_EXTERNAL_COMMAND:nagios_type}: %{NAGIOS_EC_SCHEDULE_HOST_DOWNTIME:nagios_command};%{DATA:nagios_hostname};%{NUMBER:nagios_start_time};%{NUMBER:nagios_end_time};%{NUMBER:nagios_fixed};%{NUMBER:nagios_trigger_id};%{NUMBER:nagios_duration};%{DATA:author};%{DATA:comment}),
    "NAGIOSLOGLINE" => %q(%{NAGIOSTIME} (?:%{NAGIOS_WARNING}|%{NAGIOS_CURRENT_SERVICE_STATE}|%{NAGIOS_CURRENT_HOST_STATE}|%{NAGIOS_SERVICE_NOTIFICATION}|%{NAGIOS_HOST_NOTIFICATION}|%{NAGIOS_SERVICE_ALERT}|%{NAGIOS_HOST_ALERT}|%{NAGIOS_SERVICE_FLAPPING_ALERT}|%{NAGIOS_HOST_FLAPPING_ALERT}|%{NAGIOS_SERVICE_DOWNTIME_ALERT}|%{NAGIOS_HOST_DOWNTIME_ALERT}|%{NAGIOS_PASSIVE_SERVICE_CHECK}|%{NAGIOS_PASSIVE_HOST_CHECK}|%{NAGIOS_SERVICE_EVENT_HANDLER}|%{NAGIOS_HOST_EVENT_HANDLER}|%{NAGIOS_TIMEPERIOD_TRANSITION}|%{NAGIOS_EC_LINE_DISABLE_SVC_CHECK}|%{NAGIOS_EC_LINE_ENABLE_SVC_CHECK}|%{NAGIOS_EC_LINE_DISABLE_HOST_CHECK}|%{NAGIOS_EC_LINE_ENABLE_HOST_CHECK}|%{NAGIOS_EC_LINE_PROCESS_HOST_CHECK_RESULT}|%{NAGIOS_EC_LINE_PROCESS_SERVICE_CHECK_RESULT}|%{NAGIOS_EC_LINE_SCHEDULE_HOST_DOWNTIME}|%{NAGIOS_EC_LINE_DISABLE_HOST_SVC_NOTIFICATIONS}|%{NAGIOS_EC_LINE_ENABLE_HOST_SVC_NOTIFICATIONS}|%{NAGIOS_EC_LINE_DISABLE_HOST_NOTIFICATIONS}|%{NAGIOS_EC_LINE_ENABLE_HOST_NOTIFICATIONS}|%{NAGIOS_EC_LINE_DISABLE_SVC_NOTIFICATIONS}|%{NAGIOS_EC_LINE_ENABLE_SVC_NOTIFICATIONS})),

    # postgresql
    "POSTGRESQL" => %q(%{DATESTAMP:timestamp} %{TZ} %{DATA:user_id} %{GREEDYDATA:connection_id} %{POSINT:pid}),

    # rails
    "RUUID" => %q(\h{32}),
    "RCONTROLLER" => %q((?<controller>[^#]+)#(?<action>\w+)),
    "RPROCESSING" => %q(\W*Processing by %{RCONTROLLER} as (?<format>\S+)(?:\W*Parameters: {%{DATA:params}}\W*)?),

    # redis
    "REDISTIMESTAMP" => %q(%{MONTHDAY} %{MONTH} %{TIME}),
    "REDISLOG" => %q(\[%{POSINT:pid}\] %{REDISTIMESTAMP:timestamp} \* ),
    "REDISMONLOG" => %q(%{NUMBER:timestamp} \[%{INT:database} %{IP:client}:%{NUMBER:port}\] "%{WORD:command}"\s?%{GREEDYDATA:params}),

    # ruby
    "RUBY_LOGLEVEL" => %q((?:DEBUG|FATAL|ERROR|WARN|INFO)),
    "RUBY_LOGGER" => %q([DFEWI], \[%{TIMESTAMP_ISO8601:timestamp} #%{POSINT:pid}\] *%{RUBY_LOGLEVEL:loglevel} -- +%{DATA:progname}: %{GREEDYDATA:message}),

    # squid
    "SQUID3" => %q(%{NUMBER:timestamp}\s+%{NUMBER:duration}\s%{IP:client_address}\s%{WORD:cache_result}/%{POSINT:status_code}\s%{NUMBER:bytes}\s%{WORD:request_method}\s%{NOTSPACE:url}\s(%{NOTSPACE:user}|-)\s%{WORD:hierarchy_code}/%{IPORHOST:server}\s%{NOTSPACE:content_type}),

  }

  def self.patterns
    @@global_patterns
  end

end
